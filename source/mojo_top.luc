module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8],    // DIP switches on IO Shield
    input button
    ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;

    
    .rst(rst){
      dff store_a[16];      //delay flip flops used for storing values of a,b,alufn
      dff store_b[16];
      dff store_alufn[6];

      fsm state = {IDLE, ADD1,ADD2,SUB1,SUB2,MUL,DIV,AND,OR,XOR,NOR,NAND,A,B,BSL,BSR,ASL,ASR,COMEQ1,COMEQ2,COMLT1,COMLT2,COMLT3,COMLE1,COMLE2,COMLE3,SUCC,FAIL,MANUAL};
      multi_seven_seg seg;  //using module multi_seven_seg
      stateCounter stateCOUNT;
    }
  }
  
  sig a[16];
  sig b[16];
  sig alufn[6];
  sig alu[16];
   
  alu alumod;               //creating instance of alu
       
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    
    seg.values = {5h0,5h0,5h0,5h0}; //initialising values of seven segment display
               io_seg = ~seg.seg;
           io_sel = ~seg.sel;
    a = 8h0;                //initialising value of a
    b = 8h0;                //initialising value of b
    
   
    alufn = io_dip[0][7:2]; //assigning dip switches to alufn input
    alumod.alufn = alufn;   //connecting alufn to input of module alu
    alumod.a = a;           //connecting a to input of module alu
    alumod.b = b;           //connecting a to input of module alu
    alu = alumod.alu;       //connecting alu to output of module alu
    io_led[0] = a[7:0];
    io_led[1] = a[15:8];
    
    
      
    
   
    case (state.q){                 //initial start state of finite state machine
    
      state.IDLE:
        if(io_button[1]){      //if button is pressed, move to next state
           state.d = state.ADD1;
           seg.values = {5d7, 5d10, 5d10, 5d1}; //display Add1
          
        }
        
        if(io_dip[0][0]){           //if dip switch is down, change from auto testing to manual testing
            state.d = state.MANUAL;
        }
    
    
    
    
      state.MANUAL:                   //manual test state
        if(io_dip[0][1]){               //if switch[0][1] is high, switch[1] and switch[2] become inputs for a
        a[7:0] = io_dip[1];
        a[15:8] = io_dip[2];
        if(io_button[1]){           //if button is pressed, store input a into a d flip flop
          store_a.d = a;          
        }
          
        } 
        else {                        //if switch[0][2] is low, switch[1] and switch[2] become inputs for b
        b[7:0] = io_dip[1];
        b[15:8] = io_dip[2];
        if(io_button[2]){           //if button is pressed, store input b into a d flip flop
          store_b.d = b;
        }
        }

        alufn = io_dip[0][7:2];       //assigning dip switches to alufn input
        if(io_button[3]){             //if button is pressed, store input alufn into a d flip flip
        store_alufn.d = alufn;}
          
        if(io_button[4]){             //if button is pressed, reset a,b,alufn
        store_a.d = 16b0;
        store_b.d = 16b0;
        store_alufn.d = 6b0;}
        
        alumod.a = store_a.q;         //input stored value of a into module alu
        alumod.b = store_b.q;         //input stored value of b into module alu
        alumod.alufn = store_alufn.q; //input stored value of alufn into module alu
        alu = alumod.alu;             //assigning alu to output of module alu
        io_led[1] = alu[7:0];         //display alu output on onboard leds
        io_led[2] = alu[15:8];
        io_led[0][0] = 1;
        io_led[0][7] = alumod.z;
        io_led[0][6] = alumod.v;
        io_led[0][5] = alumod.n;
        if(rst_n == 0){             //if reseybutton is pressed, return to initial state
          state.d = state.IDLE;}
    
        
        
        
    //-------------------TEST CASES FOR ADDER----------------------------------------//
    //OVERFLOW 0111 1111 1111 1111+0000 0000 0000 0001 = 1000 0000 0000 0000 (overflow)
      state.ADD1:	
        alumod.alufn = 6b0;             //assigning predetermined value of alufn
        alumod.a = 16b0111111111111111; //assigning predetermined value of a
        alumod.b = 16b0000000000000001; //assigning predetermined value of b
        alu = alumod.alu;			          //assign output of alu module to output of mojo
    
        seg.values = {5d7, 5d10, 5d10, 5d1}; //display Add1 on 7 segment
        //testing for error
        if(io_dip[2][7]){
          alu = alu + b1;}  
        if(alu == 16b1000000000000000 && alumod.v == 1 && stateCOUNT.inc_state == 1 ){   //test case fail                                    
          state.d = state.ADD2;      
        }
        else if ((alu != 16b1000000000000000 || alumod.v != 1) && stateCOUNT.inc_state == 1){
        //if alu output does not match expected output, display Err on seven segment display
        state.d = state.FAIL;
          }       
        
        io_led[1] = alu[7:0];           //center 8 leds display first 8 bits of sum
        io_led[2] = alu[15:8];          //left 8 leds display 8 second bits of sum                                   
        io_led[0][7] = alumod.z;        //Displaying values of z,v,n on onboard leds
        io_led[0][6] = alumod.v;
        io_led[0][5] = alumod.n;
          
        if(rst){               //checking switch for manual state
          state.d = state.IDLE;
        }
        
      state.ADD2:	
        alumod.alufn = 6b0;             
        alumod.a = 16b0000000000000001; 
        alumod.b = 16b0000000000000001; 
        alu = alumod.alu;			          
     
        seg.values = {5d7, 5d10, 5d10, 5d2}; //display Add2 on 7 segment         

        if(io_dip[2][7]){
          alu = alu + b1;}  
        if(alu == 16b0000000000000010 && alumod.v == 0 && stateCOUNT.inc_state == 1){                                    
          state.d = state.SUB1; 
          
          }
         else if ((alu != 16b0000000000000010 || alumod.v != 0)  && stateCOUNT.inc_state == 1){
          state.d = state.FAIL;
          }       
        
        io_led[1] = alu[7:0];           
        io_led[2] = alu[15:8];                                            
        io_led[0][7] = alumod.z;        
        io_led[0][6] = alumod.v;
        io_led[0][5] = alumod.n;
        if(rst_n == 0){              
          state.d = state.IDLE;
        }
        
      state.SUB1:	
        alumod.alufn = 6b000001;             
        alumod.a = 16b1000000000000000; 
        alumod.b = 16b0000000000000001; 
        alu = alumod.alu;			          
      
        seg.values = {5d5, 5d17, 5d8, 5d1}; //display Sub1 on 7 segment
                                       
        if(io_dip[2][7]){
          alu = alu + b1;}  
        if(alu == b0111111111111111 && alumod.v == 1 && stateCOUNT.inc_state == 1 ){                                      
          state.d = state.SUB2;      
          }
        else if ((alu != b0111111111111111 || alumod.v != 1) && stateCOUNT.inc_state == 1){
          state.d = state.FAIL;
          }       
        
        io_led[1] = alu[7:0];           
        io_led[2] = alu[15:8];                                            
        io_led[0][7] = alumod.z;        
        io_led[0][6] = alumod.v;
        io_led[0][5] = alumod.n;
          
        if(rst_n == 0){              
          state.d = state.IDLE;
         }
        
      state.SUB2:	
        alumod.alufn = 6b000001;       
        alumod.a = 16b1000000000000010; 
        alumod.b = 16b1000000000000001; 
        alu = alumod.alu;			         
      
        seg.values = {5d5, 5d17, 5d8, 5d2}; //display sub2 on 7 segment
              
        if(io_dip[2][7]){
          alu = alu + b1;}  
        if(alu == b000000000000001 && alumod.v == 0 && stateCOUNT.inc_state == 1 ){                                 
          state.d = state.MUL;      
          }
        else if ((alu != b000000000000001 || alumod.v != 0) && stateCOUNT.inc_state == 1)     {
          state.d = state.FAIL;
          }       
        
        io_led[1] = alu[7:0];          
        io_led[2] = alu[15:8];                                          
        io_led[0][7] = alumod.z;        
        io_led[0][6] = alumod.v;
        io_led[0][5] = alumod.n;
          
        if(rst_n == 0){            
          state.d = state.IDLE;
         }
    
    //-------------------TEST CASES FOR MULTIPLICATION----------------------------------------//

      state.MUL:	
        alumod.alufn = 6b110000;           
        alumod.a = 16b0000000000000010; 
        alumod.b = 16b0000000000000010; 
        alu = alumod.alu;			         
      
        seg.values = {5d13, 5d13, 5d17, 5d4}; //display MUL on 7 segment
                                        
        if(io_dip[2][7]){
          alu = alu + b1;}  
        if(alu == b0000000000000100 && stateCOUNT.inc_state == 1 ){                                    
          state.d = state.DIV;      
          }
        else if (alu != b0000000000000100 && stateCOUNT.inc_state == 1)     {                    
          state.d = state.FAIL;
          }       
        
        io_led[1] = alu[7:0];        
        io_led[2] = alu[15:8];                                        
          
        if(rst_n == 0){             
          state.d = state.IDLE;
         }
        
        
      state.DIV:	
        alumod.alufn = 6b110111;        
        alumod.a = 16b0000000000000100;
        alumod.b = 16b0000000000000010; 
        alu = alumod.alu;			         
    
        seg.values = {5d10, 5d1, 5d17,5d20 }; //display div on  7 segment
                                 
        if(io_dip[2][7]){
          alu = alu + b1;}  
        if(alu == b0000000000000010 && stateCOUNT.inc_state == 1 ){                            
          state.d = state.AND;      
          }
        else if (alu != b0000000000000010 && stateCOUNT.inc_state == 1)     {                              
          state.d = state.FAIL;
          }       
        
        io_led[1] = alu[7:0];          
        io_led[2] = alu[15:8];                                          
          
        if(rst_n == 0){          
          state.d = state.IDLE;
         }
    
     //-------------------TEST CASES FOR BOOLEAN----------------------------------------//
  
      state.AND:	
        alumod.alufn = 6b011000;          
        alumod.a = 16b0000111100001111;
        alumod.b = 16b0000111111110000;
        alu = alumod.alu;			       
      
        seg.values = {5d7, 5d13, 5d10, 5d20}; //display AND on 7 segment
                                     
        if(io_dip[2][7]){
          alu = alu + b1;}  
        if(alu == b0000111100000000 && stateCOUNT.inc_state == 1 ){                                     
          state.d = state.OR;      
          }
        else if (alu != b0000111100000000 && stateCOUNT.inc_state == 1)     {                                 
          state.d = state.FAIL;
          }       
        
        io_led[1] = alu[7:0];          
        io_led[2] = alu[15:8];                                           
          
        if(rst_n == 0){              
          state.d = state.IDLE;
         }
        
        
      state.OR:	
        alumod.alufn = 6b011110;          
        alumod.a = 16b0000111100001111; 
        alumod.b = 16b0000111111110000;
        alu = alumod.alu;			     
    
        seg.values = {5d0, 5d16, 5d20, 5d20}; //display OR  on 7 segment
                                   
        if(io_dip[2][7]){
          alu = alu + b1;}  
        if(alu == b0000111111111111 && stateCOUNT.inc_state == 1 ){                                      
          state.d = state.XOR;      
          }
        else if (alu != b0000111111111111 && stateCOUNT.inc_state == 1)     {                                 
          state.d = state.FAIL;
          }       
        
        io_led[1] = alu[7:0];    
        io_led[2] = alu[15:8];                                
          
        if(rst_n == 0){         
          state.d = state.IDLE;
         }
        
        
      state.XOR:	
        alumod.alufn = 6b010110;           
        alumod.a = 16b0000111100001111;
        alumod.b = 16b0000111111110000; 
        alu = alumod.alu;			       
     
        seg.values = {5d14, 5d0, 5d16, 5d20}; //display xor on 7 segment
                               
        if(io_dip[2][7]){
          alu = alu + b1;}  
        if(alu == b0000000011111111 && stateCOUNT.inc_state == 1 ){                                   
          state.d = state.NAND;      
          }
        else if (alu != b0000000011111111 && stateCOUNT.inc_state == 1)     {                                
          state.d = state.FAIL;
          }       
        
        io_led[1] = alu[7:0];    
        io_led[2] = alu[15:8];                                   
          
        if(rst_n == 0){         
          state.d = state.IDLE;
         }
        
        
      state.NAND:	
        alumod.alufn = 6b010111;         
        alumod.a = 16b0000111100001111;
        alumod.b = 16b0000111111110000;
        alu = alumod.alu;			    
      
        seg.values = {5d13, 5d7, 5d13, 5d10}; //display nand on 7 segment
                                
        if(io_dip[2][7]){
          alu = alu + b1;}  
        if(alu == b1111000011111111 && stateCOUNT.inc_state == 1 ){                                  
          state.d = state.NOR;      
          }
        else if (alu != b1111000011111111 && stateCOUNT.inc_state == 1)     {                          
          state.d = state.FAIL;
          }       
        
        io_led[1] = alu[7:0];       
        io_led[2] = alu[15:8];                                 
          
        if(rst_n == 0){           
          state.d = state.IDLE;
         }
        
      state.NOR:	
        alumod.alufn = 6b010001;           
        alumod.a = 16b0000111100001111; 
        alumod.b = 16b0000111111110000;
        alu = alumod.alu;			      
        seg.values = {5d13, 5d0, 5d16, 5d20}; //display nor on 7 segment
                                
        if(io_dip[2][7]){
          alu = alu + b1;}  
        if(alu == b1111000000000000 && stateCOUNT.inc_state == 1 ){                                      
          state.d = state.A;      
          }
        else if (alu != b1111000000000000 && stateCOUNT.inc_state == 1)     {                    
          state.d = state.FAIL;
          }       
        
        io_led[1] = alu[7:0];        
        io_led[2] = alu[15:8];                                        
          
        if(rst_n == 0){         
          state.d = state.IDLE;
         }
        
      state.A:	
        alumod.alufn = 6b011010;           
        alumod.a = 16b0000111100001111; 
        alumod.b = 16b0000111111110000; 
        alu = alumod.alu;			          
    
        seg.values = {5d7, 5d20, 5d20, 5d20}; //display A on 7 segment 
                                   
        if(io_dip[2][7]){
          alu = alu + b1;}  
        if(alu == b0000111100001111 && stateCOUNT.inc_state == 1 ){                                 
          state.d = state.B;      
          }
        else if (alu != b0000111100001111 && stateCOUNT.inc_state == 1)     {                        
          }       
        
        io_led[1] = alu[7:0];         
        io_led[2] = alu[15:8];                                      
          
        if(rst_n == 0){            
          state.d = state.IDLE;
         }
        
        
      state.B:	
        alumod.alufn = 6b011100;             
        alumod.a = 16b0000111100001111;
        alumod.b = 16b0000111111110000; 
        alu = alumod.alu;			       
      
        seg.values = {5d8, 5d20, 5d20, 5d20}; //display b on 7 segment
                               
        if(io_dip[2][7]){
          alu = alu + b1;}  
        if(alu == b0000111111110000 && stateCOUNT.inc_state == 1 ){                                     
          state.d = state.BSL;      
          }
        else if (alu != b0000111111110000 && stateCOUNT.inc_state == 1)     {             
          state.d = state.FAIL;
          }       
        
        io_led[1] = alu[7:0];        
        io_led[2] = alu[15:8];                                      
          
        if(rst_n == 0){          
          state.d = state.IDLE;
         }
     
      //-------------------TEST CASES FOR BITSHIFTING----------------------------------------//
 
      state.BSL:	
        alumod.alufn = 6b100000;            
        alumod.a = 16b0000111100001111; 
        alumod.b = 16b0000000000000100; 
        alu = alumod.alu;			          
      
        seg.values = {5d8, 5d5, 5d4, 5d20}; //display bSL on 7 segment
                         
        if(io_dip[2][7]){
          alu = alu + b1;}  
        if(alu == b1111000011110000 && stateCOUNT.inc_state == 1 ){                                     
          state.d = state.BSR;      
          }
        else if (alu != b1111000011110000 && stateCOUNT.inc_state == 1)     {         
          state.d = state.FAIL;
          }       
        
        io_led[1] = alu[7:0];           
        io_led[2] = alu[15:8];                                      
          
        if(rst_n == 0){               
          state.d = state.IDLE;
         } 
        
      state.BSR:	
        alumod.alufn = 6b100001;             
        alumod.a = 16b0000111100001111; 
        alumod.b = 16b0000000000000100; 
        alu = alumod.alu;			         
      
        seg.values = {5d8, 5d5, 5d16, 5d20}; //display bSR on 7 segment
                                      
        if(io_dip[2][7]){
          alu = alu + b1;}  
        if(alu == b0000000011110000 && stateCOUNT.inc_state == 1 ){                                  
          state.d = state.ASL;      
          }
        else if (alu != b0000000011110000 && stateCOUNT.inc_state == 1)     {                           
          state.d = state.FAIL;
          }       
        
        io_led[1] = alu[7:0];           
        io_led[2] = alu[15:8];                                           
          
        if(rst_n == 0){          
          state.d = state.IDLE;
         } 
       
      state.ASL:	
        alumod.alufn = 6b100010;             
        alumod.a = 16b0000111100001111; 
        alumod.b = 16b0000000000000100; 
        alu = alumod.alu;			         
      
        seg.values = {5d7, 5d5, 5d4, 5d20}; //display ASL on 7 segment
                                        
        if(io_dip[2][7]){
          alu = alu + b1;}  
        if(alu == b1111000011110000 && stateCOUNT.inc_state == 1 ){                                      
          state.d = state.ASR;      
          }
        else if (alu != b1111000011110000 && stateCOUNT.inc_state == 1)     {   
          state.d = state.FAIL;
          }       
        
        io_led[1] = alu[7:0];       
        io_led[2] = alu[15:8];                                       
          
        if(rst_n == 0){      
          state.d = state.IDLE;
         }     

      state.ASR:	
        alumod.alufn = 6b100011;         
        alumod.a = 16b0000111100001111; 
        alumod.b = 16b0000000000000100;
        alu = alumod.alu;			          
      
        seg.values = {5d7, 5d5, 5d16, 5d20}; //display ASR on 7 segment
                                      
        if(io_dip[2][7]){
          alu = alu + b1;}  
        if(alu == b0000000011110000 && stateCOUNT.inc_state == 1 ){                                     
          state.d = state.COMEQ1;      
          }
        else if (alu != b0000000011110000 && stateCOUNT.inc_state == 1)     {                                 
          state.d = state.FAIL;
          }       
        
        io_led[1] = alu[7:0];           
        io_led[2] = alu[15:8];                                          
          
        if(rst_n == 0){             
          state.d = state.IDLE;
         } 
     
        //-------------------TEST CASES FOR COMPARATOR----------------------------------------//
  
      state.COMEQ1:	
        alumod.alufn = 6b110010;             
        alumod.a = 16b0000111111111111;
        alumod.b = 16b0000000000000000; 
        alu = alumod.alu;			         
      
        seg.values = {5d9, 5d11, 5d1, 5d20}; //display CE1 on 7 segment
                                        
        if(io_dip[2][7]){
          alu = alu + b1;}  
        if(alu == b0000000000000000 && stateCOUNT.inc_state == 1 ){                                     
          state.d = state.COMEQ2;      
          }
        else if (alu != b0000000000000000 && stateCOUNT.inc_state == 1)     {                              
          state.d = state.FAIL;
          }       
        
        io_led[1] = alu[7:0];           
        io_led[2] = alu[15:8];                                          
          
        if(rst_n == 0){               
          state.d = state.IDLE;
         }    
  
      state.COMEQ2:	
        alumod.alufn = 6b110010;             
        alumod.a = 16b1111111111111111;  
        alumod.b = 16b1111111111111111; 
        alu = alumod.alu;			         
      
        seg.values = {5d9, 5d11, 5d2, 5d20}; //display CE2 on 7 segment
                                        
        if(io_dip[2][7]){
          alu = alu + b1;}  
        if(alu == b0000000000000001 && stateCOUNT.inc_state == 1 ){                                      
          state.d = state.COMLT1;      
          }
        else if (alu != b0000000000000001 && stateCOUNT.inc_state == 1)     {                 
          state.d = state.FAIL;
          }       
        
        io_led[1] = alu[7:0];           
        io_led[2] = alu[15:8];                                            
          
        if(rst_n == 0){            
          state.d = state.IDLE;
         }  
     
      state.COMLT1:	
        alumod.alufn = 6b110100;            
        alumod.a = 16b0000111111111111; 
        alumod.b = 16b0000000000000000; 
        alu = alumod.alu;			          
      
        seg.values = {5d9, 5d4, 5d1, 5d20}; //display CL1 on 7 segment
                                    
        if(io_dip[2][7]){
          alu = alu + b1;}  
        if(alu == b0000000000000000 && stateCOUNT.inc_state == 1 ){                                       
          state.d = state.COMLT2;      
          }
        else if (alu != b0000000000000000 && stateCOUNT.inc_state == 1)     {                             
          state.d = state.FAIL;
          }       
        
        io_led[1] = alu[7:0];          
        io_led[2] = alu[15:8];                                    
          
        if(rst_n == 0){             
          state.d = state.IDLE;
         }   
        
     
      state.COMLT2:	
        alumod.alufn = 6b110100;           
        alumod.b = 16b0000111111111111;
        alumod.a = 16b0000000000000000; 
        alu = alumod.alu;			         
      
        seg.values = {5d9, 5d4, 5d2, 5d20}; //display CL2 on 7 segment
                  
        if(io_dip[2][7]){
          alu = alu + b1;}  
        if(alu == b0000000000000001 && stateCOUNT.inc_state == 1 ){                                   
          state.d = state.COMLT3;      
          }
        else if (alu != b0000000000000001 && stateCOUNT.inc_state == 1)     {                                  
          state.d = state.FAIL;
          }       
        
        io_led[1] = alu[7:0];           
        io_led[2] = alu[15:8];                                             
          
        if(rst_n == 0){              
          state.d = state.IDLE;
         }    
        
      state.COMLT3:	
        alumod.alufn = 6b110100;             
        alumod.a = 16b1111111111111111;
        alumod.b = 16b1111111111111111; 
        alu = alumod.alu;			    
      
        seg.values = {5d9, 5d4, 5d3, 5d20}; //display CL3 on 7 segment
                                   
        if(io_dip[2][7]){
          alu = alu + b1;}  
        if(alu == b0000000000000000 && stateCOUNT.inc_state == 1 ){                                    
          state.d = state.COMLE1;      
          }
        else if (alu != b0000000000000000 && stateCOUNT.inc_state == 1)     {    
          state.d = state.FAIL;
          }       
        
        io_led[1] = alu[7:0];       
        io_led[2] = alu[15:8];                                       
          
        if(rst_n == 0){           
          state.d = state.IDLE;
         }     
      
      state.COMLE1:	
        alumod.alufn = 6b110110;         
        alumod.a = 16b0000111111111111; 
        alumod.b = 16b0000000000000000; 
        alu = alumod.alu;			   
      
        seg.values = {5d9, 5d4, 5d11, 5d1}; //display CLE1 on 7 segment
                                       
        if(io_dip[2][7]){
          alu = alu + b1;}  
        if(alu == b0000000000000000 && stateCOUNT.inc_state == 1 ){                                      
         state.d = state.COMLE2;      
          }
        else if (alu != b0000000000000000 && stateCOUNT.inc_state == 1)     {                             
          state.d = state.FAIL;
          }       
        
        io_led[1] = alu[7:0];        
        io_led[2] = alu[15:8];                                          
          
        if(rst_n == 0){         
          state.d = state.IDLE;
         }     
        
      state.COMLE2:	
        alumod.alufn = 6b110110;           
        alumod.a = 16b1111111111111111; 
        alumod.b = 16b1111111111111111;
        alu = alumod.alu;			        
      
       seg.values = {5d9, 5d4, 5d11, 5d2}; //display CLE2 on 7 segment
                                   
        if(io_dip[2][7]){
          alu = alu + b1;}  
        if(alu == b0000000000000001 && stateCOUNT.inc_state == 1){                                       
          state.d = state.COMLE3;      
          }
        else if (alu != b0000000000000001 && stateCOUNT.inc_state == 1)     {                               
          state.d = state.FAIL;
          }       
        
        io_led[1] = alu[7:0];       
        io_led[2] = alu[15:8];                                        
          
        if(rst_n == 0){              
          state.d = state.IDLE;
         }    
      
      state.COMLE3:	
        alumod.alufn = 6b110110;            
        alumod.b = 16b0000111111111111; 
        alumod.a = 16b0000000000000000; 
        alu = alumod.alu;			      
      
        seg.values = {5d9, 5d4, 5d11, 5d3}; //display CLE3 on 7 segment
                                        
        if(io_dip[2][7]){
          alu = alu + b1;}  
        if(alu == b0000000000000001 && stateCOUNT.inc_state == 1){                                     
          state.d = state.SUCC;      
          }
        else if (alu != b0000000000000001 && stateCOUNT.inc_state == 1)     {                         
          state.d = state.FAIL;
          }       
        
        io_led[1] = alu[7:0];         
        io_led[2] = alu[15:8];                                         
          
        if(rst_n == 0){         
          state.d = state.IDLE;
         }    
    
        
      state.SUCC:	
    
        seg.values = {5d5, 5d17, 5d9, 5d9}; //display SUCC on 7 segment. FINAL STATE
          
        if(rst_n == 0){               
          state.d = state.IDLE;
          }      
          
      state.FAIL:	
    
        seg.values = {5d12, 5d7, 5d1, 5d4}; //display Fail
          
        if(rst_n == 0){               
          state.d = state.IDLE;      
          }                  
    }      
  }
}
